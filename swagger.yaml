openapi: 3.0.3
info:
  title: Assignment-phase-01 - OpenAPI 3.0
  description: |-
    This is the API for Nine25 Assignment Phase 1
  contact:
    email: jamesbirrellgray@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://TBC/
tags:
  - name: people
    description: seatch for the people
paths:
  # [GET] People
  /people:
      get:
        tags:
          - People
        summary: Find the people
        description: Multiple status values can be provided with comma separated strings
        operationId: findPetsByStatus
        parameters:
          - name: page
            in: query
            description: used for pagination
            required: false
            schema:
              type: number
          # - name: sort
          #   in: query
          #   description: Status values that need to be considered for filter
          #   required: false
          #   explode: true
          #   schema:
          #     type: string
          #     default: available
          #     enum:
          #       - available
          #       - pending
          #       - sold
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/definitions/Person'          
              application/xml:
                schema:
                  type: array
                  items:
                    $ref: '#/definitions/Person'
          '400':
            description: Invalid status value
# # [GET] users
#   /users:
#     get:
#       tags:
#       - users
#       summary: Find All Users
#       responses:
#         200:
#           description: 'OK'
#         500:
#           description: 'Server Error'

# # [POST] users
#     post:
#       tags:
#       - users
#       summary: Add User
#       parameters:
#       - name: body
#         in: body
#         description: user Data
#         required: true
#         schema:
#           $ref: '#/definitions/users'
#       responses:
#         201:
#           description: 'Created'
#         400:
#           description: 'Bad Request'
#         409:
#           description: 'Conflict'
#         500:
#           description: 'Server Error'

# # [GET] users/id
#   /users/{id}:
#     get:
#       tags:
#       - users
#       summary: Find User By Id
#       parameters:
#       - name: id
#         in: path
#         description: User Id
#         required: true
#         type: integer
#       responses:
#         200:
#           description: 'OK'
#         409:
#           description: 'Conflict'
#         500:
#           description: 'Server Error'

# # [PUT] users/id
#     put:
#       tags:
#       - users
#       summary: Update User By Id
#       parameters:
#       - name: id
#         in: path
#         description: user Id
#         required: true
#         type: integer
#       - name: body
#         in: body
#         description: user Data
#         required: true
#         schema:
#           $ref: '#/definitions/users'
#       responses:
#         200:
#           description: 'OK'
#         400:
#           description: 'Bad Request'
#         409:
#           description: 'Conflict'
#         500:
#           description: 'Server Error'

# # [DELETE] users/id
#     delete:
#       tags:
#       - users
#       summary: Delete User By Id
#       parameters:
#       - name: id
#         in: path
#         description: user Id
#         required: true
#         type: integer
#       responses:
#         200:
#           description: 'OK'
#         409:
#           description: 'Conflict'
#         500:
#           description: 'Server Error'

# definitions

definitions:
  Person:
    type: object
    properties:
      name:
        type: string
        example: Jimmy
      height:
        type: string
        example: '172'
      url:
        type: string
        example: http://thisapi.com/person/1
    xml:
      name: person
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
    xml:
      name: '##default'
schemes:
  - https
  - http
